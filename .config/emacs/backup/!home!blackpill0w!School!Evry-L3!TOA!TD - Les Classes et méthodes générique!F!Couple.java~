package F;

import java.util.Collection;
import java.util.List;

interface Testeur<T> {
  boolean verifie_propriete(T elem);
}

public class Couple<K, V> {
  private final K key;
  protected V val;

  public Couple(K k, V v) {
    this.key = k;
    this.val = v;
  }
  public K getKey() {
    return this.key;
  }
  public V getVal() {
    return this.val;
  }
  public void setVal(V v) {
    this.val = v;
  }
  public String toString() {
    return "Couple(" + this.key + ", " + this.val + ")";
  }

  public static <T> void afficheTab(T tab[]) {
    System.out.print("[");
    for (T t : tab) {
      System.out.print(t + ", ");
    }
    System.out.println("]");
  }
  public static <T> void swap(T tab[], int i, int j) {
    if (tab == null || i >= tab.length || j >= tab.length || i < 0 || j < 0)
      return;
    T tmp = tab[i];
    tab[i] = tab[j];
    tab[j] = tmp;
  }
  public static <T extends Comparable<T>> T max(List<T> l, int begin, int end) {
    if (l == null || begin < 0 || end >= l.size() || begin > end)
      return null;

    T maxElem = l.get(begin);
    for (int i = begin+1; i <= end; ++i) {
      if (maxElem == null)
        maxElem = l.get(i);
      else if (l.get(i) != null)
        maxElem = maxElem.compareTo(l.get(i)) > 0 ? maxElem : l.get(i);
    }
    return maxElem;
  }
  <T> int elems_verifiant_propriete(Collection<T> elems, Testeur<T> testeur) {
    int res = 0;
    for (T elem: elems) {
      if (elem != null && testeur.verifie_propriete(elem)) {
        ++res;
      }
    }
    return res;
  }
}